{"name":"Braid","tagline":"Simple tool to help track git vendor branches in a git repository.","body":"# Braid\r\n\r\n[![Build Status](https://secure.travis-ci.org/realityforge/braid.png?branch=master)](http://travis-ci.org/realityforge/braid)\r\n\r\nBraid is a simple tool to help track git vendor branches in a git repository.\r\n\r\nThe project homepage is [here](http://github.com/realityforge/braid/wikis/home).\r\n\r\n## Braid on Vendoring\r\n\r\nVendoring allows you take the source code of an external library and ensure it is version\r\ncontrolled along with the main project. This is in contrast to including a reference to a\r\npackaged version of an external library that is available in a binary artifact repository\r\nsuch as Maven Central, RubyGems or NPM.\r\n\r\nVendoring is useful when you need to patch or customize the external libraries or the\r\nexternal library is expected to co-evolve with the main project. The developer can make\r\nchanges to the main project and patch the library in a single commit.\r\n\r\nThe problem arises when the external library makes changes that you want to integrate into\r\nyour local vendored version or the developer makes changes to the local version that they\r\nwant integrated into the external library.\r\n\r\nA typical \"implementation\" of vendoring is to simply download or checkout the source for the\r\nexternal library, remove the .git or .svn directories and commit it to the main source tree.\r\nHowever this approach makes it very difficult to update the library. When you want to update\r\nthe library do you re-apply your local changes onto a new copy of the vendored library or do\r\nyou re-apply the changes from the external library to local version. In both cases this\r\ninvolves manual generation and application of patch files to manually checked out source trees.\r\n\r\nThis is where braid comes into play. Braid makes it easy to vendor in remote git repositories\r\nand use an automated mechanism for updating the external library and generating patches to upgrade\r\nthe external library.\r\n\r\n## Requirements\r\n\r\n * git 1.6+\r\n * main >= 4.2.0\r\n * open4 >= 1.0.1 (unless using jruby)\r\n\r\n## Installing using rubygems - official releases\r\n\r\n    gem install realityforge-braid\r\n\r\n## Installing from source\r\n\r\n    git clone git://github.com/realityforge/braid.git\r\n    cd braid\r\n    bundle install\r\n    rake install # possibly requiring sudo\r\n\r\n## Quick usage - ruby project\r\n\r\nLet's assume we're writing something like gitnub that needs grit in lib/grit. Initialize the repo (nothing braid related here):\r\n\r\n    git init gritty\r\n    cd gritty\r\n    touch README\r\n    git add README\r\n    git commit -m \"initial commit\"\r\n\r\nNow let's vendor grit:\r\n\r\n    braid add git://github.com/mojombo/grit.git lib/grit\r\n\r\nAnd you're done! Braid vendored grit into lib/grit. Feel free to inspect the changes with git log or git show.\r\n\r\nIf further down the line, you want to bring new changes from grit in your repository, just update the mirror:\r\n\r\n    braid update lib/grit\r\n\r\n## Quick usage - rails project\r\n\r\nLet's assume you want to start a new rails app called shiny. Initialize the repo (nothing braid related here):\r\n\r\n    git init shiny\r\n    cd shiny\r\n    touch README\r\n    git add README\r\n    git commit -m \"initial commit\"\r\n\r\nVendor rails (this might take a while because the rails repo is huge!):\r\n\r\n    braid add git://github.com/rails/rails.git vendor/rails\r\n\r\nCreate your new rails app (nothing braid related here):\r\n\r\n    ruby vendor/rails/railties/bin/rails .\r\n    git add .\r\n    git commit -m \"rails .\"\r\n\r\nAdd any plugins you might need:\r\n\r\n    braid add git://github.com/thoughtbot/shoulda.git -p\r\n    braid add git://github.com/thoughtbot/factory_girl.git -p\r\n    braid add git://github.com/mbleigh/subdomain-fu.git -p\r\n\r\nAnd you're done! Braid vendored rails and your plugins. Feel free to inspect the changes with git log or git show.\r\n\r\nIf further down the line, you want to bring new changes from rails in your repository, just update the mirror:\r\n\r\n    braid update vendor/rails\r\n\r\nOr, if you want all mirrors updated:\r\n\r\n    braid update\r\n\r\n## More usage\r\n\r\nUse the built in help system to find out about all commands and options:\r\n\r\n    braid help\r\n    braid help add # or braid add --help\r\n\r\nYou may also want to read [Usage and examples](http://github.com/realityforge/braid/wikis/usage-and-examples).\r\n\r\n## Troubleshooting\r\n\r\nCheck [Troubleshooting](http://github.com/realityforge/braid/wikis/troubleshooting) if you're having issues.\r\n\r\n# Credit\r\n\r\nThis tool is a downstream evolution of a identically named tool initially developed by Cristi Balan (evilchelu)\r\nand Norbert Crombach (norbert). All credit goes to the original for the initial code and idea. Further maintenance\r\nand bugs are courtesy of Peter Donald.\r\n\r\n## Contributors (alphabetically)\r\n\r\n* Alan Harper\r\n* Christoph Sturm\r\n* Dennis Muhlestein\r\n* Ferdinand Svehla\r\n* Michael Klishin\r\n* Roman Heinrich\r\n* Travis Tilley\r\n* Tyler Rick\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}