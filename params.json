{"name":"Braid","tagline":"Simple tool to help track git vendor branches in a git repository.","body":"# Braid\r\n\r\n[![Build Status](https://secure.travis-ci.org/realityforge/braid.png?branch=master)](http://travis-ci.org/realityforge/braid)\r\n\r\nBraid is a simple tool to help track git vendor branches in a git repository.\r\n\r\nThe project homepage is [here](http://realityforge.github.io/braid).\r\n\r\n## Braid on Vendoring\r\n\r\nVendoring allows you take the source code of an external library and ensure it is version\r\ncontrolled along with the main project. This is in contrast to including a reference to a\r\npackaged version of an external library that is available in a binary artifact repository\r\nsuch as Maven Central, RubyGems or NPM.\r\n\r\nVendoring is useful when you need to patch or customize the external libraries or the\r\nexternal library is expected to co-evolve with the main project. The developer can make\r\nchanges to the main project and patch the library in a single commit.\r\n\r\nThe problem arises when the external library makes changes that you want to integrate into\r\nyour local vendored version or the developer makes changes to the local version that they\r\nwant integrated into the external library.\r\n\r\nA typical \"implementation\" of vendoring is to simply download or checkout the source for the\r\nexternal library, remove the .git or .svn directories and commit it to the main source tree.\r\nHowever this approach makes it very difficult to update the library. When you want to update\r\nthe library do you re-apply your local changes onto a new copy of the vendored library or do\r\nyou re-apply the changes from the external library to local version. In both cases this\r\ninvolves manual generation and application of patch files to manually checked out source trees.\r\n\r\nThis is where braid comes into play. Braid makes it easy to vendor in remote git repositories\r\nand use an automated mechanism for updating the external library and generating patches to upgrade\r\nthe external library.\r\n\r\nBraid creates a file `.braids` in the root of your repository that contains references to\r\nexternal libraries or mirrors. There are two types of mirrors in braid: squashed and full.\r\nMirrors are *squashed by default*, which is what you'll generally want because they're faster\r\nand don't pollute your history with commits from the mirrors.\r\n\r\nFull mirrors are useful when you want to view imported history in your own project. You usually\r\nwant this if the mirror is also a repository you have access to, for example, when using shared\r\ncode across projects.\r\n\r\nPlease note that you *cannot change* between mirror types after the initial add. You'll have to\r\nremove the mirror and add it again.\r\n\r\n## Installing using rubygems - official releases\r\n\r\n    gem install realityforge-braid\r\n\r\n## Installing from source\r\n\r\n    git clone git://github.com/realityforge/braid.git\r\n    cd braid\r\n    bundle install\r\n    rake install # possibly requiring sudo\r\n\r\n## Quick usage - ruby project\r\n\r\nLet's assume we're writing the project `myproject` that needs grit in lib/grit. Initialize the repo (nothing braid related here):\r\n\r\n    git init myproject\r\n    cd myproject\r\n    touch README\r\n    git add README\r\n    git commit -m \"initial commit\"\r\n\r\nNow let's vendor grit:\r\n\r\n    braid add git://github.com/mojombo/grit.git lib/grit\r\n\r\nAnd you're done! Braid vendored grit into lib/grit. Feel free to inspect the changes with git log or git show.\r\n\r\nIf further down the line, you want to bring new changes from grit into your repository, just update the mirror:\r\n\r\n    braid update lib/grit\r\n\r\nIf you make changes to the grit library and want to generate a patch file so that you can submit the patch file\r\nto the grit project:\r\n\r\n    braid diff lib/grit > grit.patch\r\n\r\nOnce those changes have been applied to grit you probably want to update your local version of grit again.\r\n\r\n    braid update lib/grit\r\n\r\n## More usage\r\n\r\nUse the built in help system to find out about all commands and options:\r\n\r\n    braid help\r\n    braid help add # or braid add --help\r\n\r\n### Examples\r\n\r\n#### Adding a mirror\r\n\r\n    braid add git://github.com/rails/rails.git vendor/rails\r\n\r\n#### Adding mirrors with revisions\r\n\r\n    braid add --revision bf1b1e0 git://github.com/rails/rails.git vendor/rails\r\n\r\n#### Adding mirrors with full history\r\n\r\n    braid add --full git://github.com/mislav/will_paginate.git vendor/plugins/will_paginate\r\n\r\n#### Updating mirrors\r\n\r\n    # Update a specific mirror\r\n    braid update vendor/plugins/cache_fu\r\n    # Update all mirrors\r\n    braid update\r\n\r\n#### Updating mirrors with conflicts\r\n\r\nIf a braid update creates a conflict, braid will stop execution and leave the partially committed\r\nfiles in your working copy, just like a normal git merge conflict would.\r\n\r\nYou will then have to resolve all conflicts and manually run `git commit`. The commit message is\r\nalready prepared.\r\n\r\nIf you want to cancel the braid update and the merge, you'll have to reset your working copy and\r\nindex with `git reset --hard`.\r\n\r\n#### Locking and unlocking mirrors\r\n\r\n    braid update --revision 6c1c16b vendor/rails\r\n    braid update --head vendor/rails\r\n\r\n#### Showing local changes made to mirrors\r\n\r\n    braid diff vendor/rails\r\n\r\n# Credit\r\n\r\nThis tool is a downstream evolution of a identically named tool initially developed by Cristi Balan (evilchelu)\r\nand Norbert Crombach (norbert). All credit goes to the original for the initial code and idea. Further maintenance\r\nand bugs are courtesy of Peter Donald.\r\n\r\n## Contributors (alphabetically)\r\n\r\n* Alan Harper\r\n* Christoph Sturm\r\n* Cristi Balan (Original Author)\r\n* Dennis Muhlestein\r\n* Ferdinand Svehla\r\n* Michael Klishin\r\n* Norbert Crombach (Original Author)\r\n* Peter Donald (Current Maintainer)\r\n* Roman Heinrich\r\n* Travis Tilley\r\n* Tyler Rick\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}